{"ast":null,"code":"import _slicedToArray from \"/Users/christophecaillet/Dev_local/React/grandcompte/leospa-main/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/christophecaillet/Dev_local/React/grandcompte/leospa-main/src/Layouts/Pages/Gestion.js\";\nimport React, { useRef, useState, Fragment, useEffect } from \"react\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { getDatabase, ref, set, onValue } from \"firebase/database\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { auth, logInWithEmailAndPassword } from \"../../firebase\";\n\nconst Gestion = props => {\n  const _useAuthState = useAuthState(auth),\n        _useAuthState2 = _slicedToArray(_useAuthState, 3),\n        user = _useAuthState2[0],\n        loading = _useAuthState2[1],\n        error = _useAuthState2[2];\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        userLogged = _useState2[0],\n        setUserLogged = _useState2[1];\n\n  useEffect(() => {\n    auth.onAuthStateChanged(function (user) {\n      setUserLogged(user);\n\n      if (true) {\n        const prospectRef = ref(db, \"prospect/\" + user.uid);\n        onValue(prospectRef, snapshot => {\n          const data = snapshot.val();\n\n          if (data && !data.payed) {\n            setPropal(data);\n          } else {\n            // Aucune proposition en cours ou elle est payée\n            console.log(\"aucune offre\");\n            setProposition(false);\n          }\n        });\n      }\n    });\n  }, []);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"gestion\");\n};\n\nexport default Gestion;","map":{"version":3,"sources":["/Users/christophecaillet/Dev_local/React/grandcompte/leospa-main/src/Layouts/Pages/Gestion.js"],"names":["React","useRef","useState","Fragment","useEffect","useLocation","useHistory","getDatabase","ref","set","onValue","useAuthState","auth","logInWithEmailAndPassword","Gestion","props","user","loading","error","userLogged","setUserLogged","onAuthStateChanged","prospectRef","db","uid","snapshot","data","val","payed","setPropal","console","log","setProposition"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CC,SAA5C,QAA6D,OAA7D;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,kBAAxC;AACA,SAASC,WAAT,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgCC,OAAhC,QAA+C,mBAA/C;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,IAAT,EAAeC,yBAAf,QAAgD,gBAAhD;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA,wBACMJ,YAAY,CAACC,IAAD,CADlB;AAAA;AAAA,QAClBI,IADkB;AAAA,QACZC,OADY;AAAA,QACHC,KADG;;AAAA,oBAEWhB,QAAQ,CAAC,KAAD,CAFnB;AAAA;AAAA,QAElBiB,UAFkB;AAAA,QAENC,aAFM;;AAGzBhB,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,IAAI,CAACS,kBAAL,CAAwB,UAAUL,IAAV,EAAgB;AACtCI,MAAAA,aAAa,CAACJ,IAAD,CAAb;;AAEA,UAAI,IAAJ,EAAU;AACR,cAAMM,WAAW,GAAGd,GAAG,CAACe,EAAD,EAAK,cAAcP,IAAI,CAACQ,GAAxB,CAAvB;AACAd,QAAAA,OAAO,CAACY,WAAD,EAAeG,QAAD,IAAc;AACjC,gBAAMC,IAAI,GAAGD,QAAQ,CAACE,GAAT,EAAb;;AACA,cAAID,IAAI,IAAI,CAACA,IAAI,CAACE,KAAlB,EAAyB;AACvBC,YAAAA,SAAS,CAACH,IAAD,CAAT;AACD,WAFD,MAEO;AACL;AACAI,YAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAC,YAAAA,cAAc,CAAC,KAAD,CAAd;AACD;AACF,SATM,CAAP;AAUD;AACF,KAhBD;AAiBD,GAlBQ,EAkBN,EAlBM,CAAT;AAmBA,SAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACD,CAvBD;;AAyBA,eAAelB,OAAf","sourcesContent":["import React, { useRef, useState, Fragment, useEffect } from \"react\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { getDatabase, ref, set, onValue } from \"firebase/database\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { auth, logInWithEmailAndPassword } from \"../../firebase\";\n\nconst Gestion = (props) => {\n  const [user, loading, error] = useAuthState(auth);\n  const [userLogged, setUserLogged] = useState(false);\n  useEffect(() => {\n    auth.onAuthStateChanged(function (user) {\n      setUserLogged(user);\n\n      if (true) {\n        const prospectRef = ref(db, \"prospect/\" + user.uid);\n        onValue(prospectRef, (snapshot) => {\n          const data = snapshot.val();\n          if (data && !data.payed) {\n            setPropal(data);\n          } else {\n            // Aucune proposition en cours ou elle est payée\n            console.log(\"aucune offre\");\n            setProposition(false);\n          }\n        });\n      }\n    });\n  }, []);\n  return <Fragment>gestion</Fragment>;\n};\n\nexport default Gestion;\n"]},"metadata":{},"sourceType":"module"}