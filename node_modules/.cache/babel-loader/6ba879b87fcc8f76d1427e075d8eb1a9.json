{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { GoogleAuthProvider, getAuth, signInWithPopup, signInWithEmailAndPassword, createUserWithEmailAndPassword, sendPasswordResetEmail, signOut } from \"firebase/auth\";\nimport { getFirestore, query, getDocs, collection, where, addDoc } from \"firebase/firestore\";\nimport { getDatabase } from \"firebase/database\";\nimport * as firebase from \"firebase\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC7Ga1C0cD3_OD0nd_Dguu6qArqNQUbjHg\",\n  authDomain: \"unextra-prod.firebaseapp.com\",\n  databaseURL: \"https://unextra-prod-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"unextra-prod\",\n  storageBucket: \"unextra-prod.appspot.com\",\n  messagingSenderId: \"705321915257\",\n  appId: \"1:705321915257:web:9cb3e910ef3f3a5d0e15a8\",\n  measurementId: \"G-L8FR6S8D9Z\"\n};\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getDatabase(app);\nconst googleProvider = new GoogleAuthProvider();\n\nconst signInWithGoogle = async () => {\n  try {\n    const res = await signInWithPopup(auth, googleProvider);\n    const user = res.user;\n    const q = query(collection(db, \"users\"), where(\"uid\", \"==\", user.uid));\n    const docs = await getDocs(q);\n\n    if (docs.docs.length === 0) {\n      await addDoc(collection(db, \"users\"), {\n        uid: user.uid,\n        name: user.displayName,\n        authProvider: \"google\",\n        email: user.email\n      });\n    }\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst logInWithEmailAndPassword = async (email, password) => {\n  try {\n    await signInWithEmailAndPassword(auth, email, password);\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst registerWithEmailAndPassword = async (name, email, password) => {\n  try {\n    const res = await createUserWithEmailAndPassword(auth, email, password);\n    const user = res.user;\n    await addDoc(collection(db, \"users\"), {\n      uid: user.uid,\n      name,\n      authProvider: \"local\",\n      email\n    });\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst sendPasswordReset = async email => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    alert(\"Password reset link sent!\");\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst logout = () => {\n  signOut(auth);\n};\n\nexport { auth, db, signInWithGoogle, logInWithEmailAndPassword, registerWithEmailAndPassword, sendPasswordReset, logout };","map":{"version":3,"sources":["/Users/christophecaillet/Dev_local/React/grandcompte/leospa-main/src/firebase.js"],"names":["initializeApp","GoogleAuthProvider","getAuth","signInWithPopup","signInWithEmailAndPassword","createUserWithEmailAndPassword","sendPasswordResetEmail","signOut","getFirestore","query","getDocs","collection","where","addDoc","getDatabase","firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","googleProvider","signInWithGoogle","res","user","q","uid","docs","length","name","displayName","authProvider","email","err","console","error","alert","message","logInWithEmailAndPassword","password","registerWithEmailAndPassword","sendPasswordReset","logout"],"mappings":"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","sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n  GoogleAuthProvider,\n  getAuth,\n  signInWithPopup,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  sendPasswordResetEmail,\n  signOut,\n} from \"firebase/auth\";\nimport {\n  getFirestore,\n  query,\n  getDocs,\n  collection,\n  where,\n  addDoc,\n} from \"firebase/firestore\";\n\nimport { getDatabase } from \"firebase/database\";\n\nimport * as firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC7Ga1C0cD3_OD0nd_Dguu6qArqNQUbjHg\",\n  authDomain: \"unextra-prod.firebaseapp.com\",\n  databaseURL:\n    \"https://unextra-prod-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"unextra-prod\",\n  storageBucket: \"unextra-prod.appspot.com\",\n  messagingSenderId: \"705321915257\",\n  appId: \"1:705321915257:web:9cb3e910ef3f3a5d0e15a8\",\n  measurementId: \"G-L8FR6S8D9Z\",\n};\n\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getDatabase(app);\n\nconst googleProvider = new GoogleAuthProvider();\n\nconst signInWithGoogle = async () => {\n  try {\n    const res = await signInWithPopup(auth, googleProvider);\n    const user = res.user;\n    const q = query(collection(db, \"users\"), where(\"uid\", \"==\", user.uid));\n    const docs = await getDocs(q);\n    if (docs.docs.length === 0) {\n      await addDoc(collection(db, \"users\"), {\n        uid: user.uid,\n        name: user.displayName,\n        authProvider: \"google\",\n        email: user.email,\n      });\n    }\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst logInWithEmailAndPassword = async (email, password) => {\n  try {\n    await signInWithEmailAndPassword(auth, email, password);\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst registerWithEmailAndPassword = async (name, email, password) => {\n  try {\n    const res = await createUserWithEmailAndPassword(auth, email, password);\n    const user = res.user;\n    await addDoc(collection(db, \"users\"), {\n      uid: user.uid,\n      name,\n      authProvider: \"local\",\n      email,\n    });\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst sendPasswordReset = async (email) => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    alert(\"Password reset link sent!\");\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst logout = () => {\n  signOut(auth);\n};\n\nexport {\n  auth,\n  db,\n  signInWithGoogle,\n  logInWithEmailAndPassword,\n  registerWithEmailAndPassword,\n  sendPasswordReset,\n  logout,\n};\n"]},"metadata":{},"sourceType":"module"}